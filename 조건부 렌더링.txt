#key를 이용한 재사용 가능한 엘리먼트 제어

<template v-if="loginType === 'username'">
  <label>사용자 이름</label>
  <input placeholder="사용자 이름을 입력하세요">
</template>
<template v-else>
  <label>이메일</label>
  <input placeholder="이메일 주소를 입력하세요">
</template>

=> 위 코드에선 loginType을 바꿔도 사용자가 input에 입력한 내용은 지워지지 않음. 두 템플릿 모두 같은 요소를 사용하는 것이므로, input은 대체되지 않고 단지 placeholder만 변경됨. 

<template v-if="loginType === 'username'">
  <label>사용자 이름</label>
  <input placeholder="사용자 이름을 입력하세요" key="username-input">
</template>
<template v-else>
  <label>이메일</label>
  <input placeholder="이메일 주소를 입력하세요" key="email-input">
</template>

=> key 속성을 추가하면, 각 input 요소가 서로 별개임을 알리므로 트랜지션 할 때마다 입력이 처음부터 렌더링됨. 


#v-show: v-if와 유사하나, v-show가 있는 엘리먼트는 항상 렌더링되고 DOM에 남아있음. 
v-if는 조건부 블럭 안의 이벤트 리스너와 자식 컴포넌트가 토글하는 동안 적절하게 제거되고 다시 만들어지기 때문에 “진짜” 조건부 렌더링 입니다

v-if는 또한 게으릅니다 초기 렌더링에서 조건이 거짓인 경우 아무것도 하지 않습니다. 조건 블록이 처음으로 참이 될 때 까지 렌더링 되지 않습니다.

비교해보면, v-show는 훨씬 단순합니다. CSS 기반 토글만으로 초기 조건에 관계 없이 엘리먼트가 항상 렌더링 됩니다.

일반적으로 v-if는 토글 비용이 높고 v-show는 초기 렌더링 비용이 더 높습니다. 매우 자주 바꾸기를 원한다면 v-show를, 런타임 시 조건이 바뀌지 않으면 v-if를 권장합니다.


# v-if  VS v-for
v-for가 우선순위가 높다. 